// src/pages/attendance/RecordAttendancePage.tsx
import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Paper,
  Stack,
  Button,
  TextField,
  MenuItem,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  Snackbar,
  Alert,
  ToggleButtonGroup,
  ToggleButton,
  Autocomplete,
} from "@mui/material";
import dayjs from "dayjs";
import api from "../../api/api";

interface Student {
  _id: string;
  name: string;
  className: string;
}

interface AttendanceRecord {
  _id: string;
  studentId: string;
  studentName: string;
  className: string;
  date: string;
  session: string;
  permission: boolean;
}

function removeVietnameseTones(str: string): string {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D");
}

export default function RecordAttendancePage() {
  const [viewMode, setViewMode] = useState<"day" | "week" | "student">("day");
  const [className, setClassName] = useState("");
  const [classes, setClasses] = useState<string[]>([]);
  const [date, setDate] = useState(dayjs().format("YYYY-MM-DD"));
  const [records, setRecords] = useState<AttendanceRecord[]>([]);
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: any }>({
    open: false,
    message: "",
    severity: "success",
  });

  // H·ªçc sinh
  const [studentInput, setStudentInput] = useState("");
  const [suggestions, setSuggestions] = useState<Student[]>([]);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);

  // üìò Load danh s√°ch l·ªõp
  useEffect(() => {
    const loadClasses = async () => {
      try {
        const res = await api.get("/api/classes");
        const arr = (res.data || []).map((c: any) => c.className ?? c.name ?? String(c));
        setClasses(arr);
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch l·ªõp:", err);
      }
    };
    loadClasses();
  }, []);

  // üîç G·ª£i √Ω h·ªçc sinh khi nh·∫≠p
  useEffect(() => {
    if (!studentInput.trim()) {
      setSuggestions([]);
      return;
    }

    const timeout = setTimeout(async () => {
      try {
        const params = new URLSearchParams({
          name: studentInput.trim(),
          normalizedName: removeVietnameseTones(studentInput.trim()),
        });
        const res = await api.get(`/api/students/search?${params.toString()}`);
        setSuggestions(res.data || []);
      } catch (err) {
        console.error("L·ªói t√¨m h·ªçc sinh:", err);
        setSuggestions([]);
      }
    }, 300);
    return () => clearTimeout(timeout);
  }, [studentInput]);

  // üì¶ L·∫•y danh s√°ch ngh·ªâ h·ªçc theo ch·∫ø ƒë·ªô xem
  const fetchRecords = async () => {
    try {
      let res;
      const cleanDate = date.split(":")[0];

      if (viewMode === "day") {
        res = await api.get(`/api/class-attendance-summaries/by-date`, {
          params: { className, date: cleanDate },
        });
      } else if (viewMode === "week") {
        res = await api.get(`/api/class-attendance-summaries/by-week`, {
          params: { className, date: cleanDate },
        });
      } else if (viewMode === "student" && selectedStudent) {
        res = await api.get(`/api/class-attendance-summaries/by-student/${selectedStudent._id}`);
      } else {
        setRecords([]);
        return;
      }

      setRecords(res.data || []);
    } catch (err) {
      console.error("L·ªói t·∫£i danh s√°ch:", err);
      setRecords([]);
    }
  };

  // üîÅ T·ª± ƒë·ªông fetch khi thay ƒë·ªïi ƒëi·ªÅu ki·ªán
  useEffect(() => {
    fetchRecords();
  }, [viewMode, className, date, selectedStudent]);

  return (
    <Box p={3}>
      <Typography variant="h5" fontWeight="bold" gutterBottom>
        Ghi nh·∫≠n chuy√™n c·∫ßn
      </Typography>

      {/* B·ªô ch·ªçn ch·∫ø ƒë·ªô xem */}
      <Stack direction="row" spacing={2} mb={2}>
        <Typography fontWeight="bold">Xem danh s√°ch theo:</Typography>
        <ToggleButtonGroup
          color="primary"
          value={viewMode}
          exclusive
          onChange={(_, v) => v && setViewMode(v)}
        >
          <ToggleButton value="day">Ng√†y</ToggleButton>
          <ToggleButton value="week">Tu·∫ßn</ToggleButton>
          <ToggleButton value="student">H·ªçc sinh</ToggleButton>
        </ToggleButtonGroup>
      </Stack>

      {/* B·ªô l·ªçc d·ªØ li·ªáu */}
      <Paper sx={{ p: 2, mb: 3 }}>
        {viewMode === "student" ? (
          <Stack direction="row" spacing={2} alignItems="center" flexWrap="wrap">
            <Autocomplete
              freeSolo
              options={suggestions}
              getOptionLabel={(s) => s.name || ""}
              inputValue={studentInput}
              onInputChange={(_, v) => setStudentInput(v)}
              onChange={(_, v) => setSelectedStudent(v)}
              sx={{ width: 250 }}
              renderInput={(params) => (
                <TextField {...params} label="Nh·∫≠p t√™n h·ªçc sinh" size="small" />
              )}
            />
            {selectedStudent && (
              <Typography variant="body2" color="gray">
                L·ªõp: {selectedStudent.className}
              </Typography>
            )}
          </Stack>
        ) : (
          <Stack direction="row" spacing={2} alignItems="center" flexWrap="wrap">
            <TextField
              select
              label="L·ªõp"
              size="small"
              value={className}
              onChange={(e) => setClassName(e.target.value)}
              sx={{ width: 160 }}
            >
              {classes.map((c) => (
                <MenuItem key={c} value={c}>
                  {c}
                </MenuItem>
              ))}
            </TextField>

            <TextField
              label="Ng√†y"
              type="date"
              size="small"
              value={date}
              onChange={(e) => setDate(e.target.value)}
            />
          </Stack>
        )}
      </Paper>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>STT</TableCell>
              <TableCell>H·ªç t√™n</TableCell>
              <TableCell>L·ªõp</TableCell>
              <TableCell>Ng√†y</TableCell>
              <TableCell>Bu·ªïi</TableCell>
              <TableCell>Ph√©p</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {records.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} align="center">
                  Kh√¥ng c√≥ d·ªØ li·ªáu
                </TableCell>
              </TableRow>
            ) : (
              records.map((r, i) => (
                <TableRow key={r._id}>
                  <TableCell>{i + 1}</TableCell>
                  <TableCell>{r.studentName}</TableCell>
                  <TableCell>{r.className}</TableCell>
                  <TableCell>{dayjs(r.date).format("DD/MM/YYYY")}</TableCell>
                  <TableCell>{r.session}</TableCell>
                  <TableCell>
                    {r.permission ? (
                      <Typography color="green">C√≥ ph√©p</Typography>
                    ) : (
                      <Typography color="error">Kh√¥ng ph√©p</Typography>
                    )}
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Th√¥ng b√°o */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
      </Snackbar>
    </Box>
  );
}
