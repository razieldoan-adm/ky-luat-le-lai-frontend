import { useEffect, useState } from "react";
import {
  Box,
  Button,
  TextField,
  MenuItem,
  Typography,
  Paper,
  Stack,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  IconButton,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import api from "../../api/api";

interface StudentSuggestion {
  _id: string;
  name: string;
  className: string;
}

interface ViolationRecord {
  _id: string;
  className: string;
  studentName: string;
  violation: string;
  date: string;
  recorder: string;
  scoreChange?: number; // ‚úÖ th√™m tr∆∞·ªùng ƒëi·ªÉm tr·ª´
  note?: string; // ‚úÖ th√™m tr∆∞·ªùng ghi ch√∫
}

export default function ClassLineUpSummaryPage() {
  const [className, setClassName] = useState("");
  const [classes, setClasses] = useState<string[]>([]);
  const [studentName, setStudentName] = useState("");
  const [suggestions, setSuggestions] = useState<StudentSuggestion[]>([]);
  const [selectedStudents, setSelectedStudents] = useState<string[]>([]);
  const [violation, setViolation] = useState("");
  const [recorder, setRecorder] = useState("th Huy");
  const [date, setDate] = useState(() => new Date().toISOString().split("T")[0]);
  const [records, setRecords] = useState<ViolationRecord[]>([]);

  // üîπ Load danh s√°ch l·ªõp
  useEffect(() => {
    const loadClasses = async () => {
      try {
        const res = await api.get("/api/classes");
        setClasses(res.data.map((c: any) => c.className));
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch l·ªõp:", err);
      }
    };
    loadClasses();
  }, []);

  // üîπ G·ª£i √Ω h·ªçc sinh theo l·ªõp v√† t√™n
  useEffect(() => {
    if (!studentName.trim() || !className) {
      setSuggestions([]);
      return;
    }
    const delayDebounce = setTimeout(async () => {
      try {
        const res = await api.get("/api/students/search", {
          params: { name: studentName, className },
        });
        setSuggestions(res.data);
      } catch (err) {
        console.error("L·ªói t√¨m h·ªçc sinh:", err);
      }
    }, 300);
    return () => clearTimeout(delayDebounce);
  }, [studentName, className]);

  // üîπ L·∫•y danh s√°ch vi ph·∫°m
  const loadViolations = async () => {
    try {
      const res = await api.get("/api/class-lineup-summaries");
      const filtered = res.data.filter((r: any) => r.className && r.violation);
      setRecords(filtered);
    } catch (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch vi ph·∫°m:", err);
    }
  };
  useEffect(() => {
    loadViolations();
  }, []);

  // üîπ Ghi nh·∫≠n vi ph·∫°m
  const handleSave = async () => {
    if (!className || !violation || !recorder)
      return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");

    try {
      const now = new Date();
      const payload = {
        className,
        date: new Date(`${date}T${now.toTimeString().split(" ")[0]}`),
        violation,
        recorder,
        studentName: selectedStudents.join(", "),
      };
      await api.post("/api/class-lineup-summaries", payload);
      setStudentName("");
      setSelectedStudents([]);
      setViolation("");
      loadViolations();
    } catch (err) {
      console.error("L·ªói ghi nh·∫≠n:", err);
      alert("Ghi nh·∫≠n th·∫•t b·∫°i!");
    }
  };

  // üîπ X√≥a vi ph·∫°m
  const handleDelete = async (id: string) => {
    if (!window.confirm("X√≥a vi ph·∫°m n√†y?")) return;
    try {
      await api.delete(`/api/class-lineup-summaries/${id}`);
      setRecords((prev) => prev.filter((r) => r._id !== id));
    } catch (err) {
      console.error("L·ªói x√≥a vi ph·∫°m:", err);
    }
  };

  return (
    <Box p={3}>
      <Typography variant="h5" mb={2}>
        Ghi nh·∫≠n l·ªói x·∫øp h√†ng
      </Typography>

      {/* --- Form ghi nh·∫≠n --- */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Stack spacing={2}>
          {/* --- L·ªõp --- */}
          <TextField
            select
            label="L·ªõp"
            value={className}
            onChange={(e) => {
              setClassName(e.target.value);
              setSelectedStudents([]);
            }}
          >
            {classes.map((cls) => (
              <MenuItem key={cls} value={cls}>
                {cls}
              </MenuItem>
            ))}
          </TextField>

          {/* --- L·ªói vi ph·∫°m --- */}
          <TextField
            select
            fullWidth
            label="L·ªói vi ph·∫°m"
            value={violation}
            onChange={(e) => setViolation(e.target.value)}
          >
            <MenuItem value="T·∫≠p trung x·∫øp h√†ng qu√° th·ªùi gian quy ƒë·ªãnh">
              T·∫≠p trung x·∫øp h√†ng qu√° th·ªùi gian quy ƒë·ªãnh
            </MenuItem>
            <MenuItem value="M·∫•t tr·∫≠t t·ª±, ƒë√πa gi·ª°n khi x·∫øp h√†ng">
              M·∫•t tr·∫≠t t·ª±, ƒë√πa gi·ª°n khi x·∫øp h√†ng
            </MenuItem>
            <MenuItem value="Di chuy·ªÉn l·ªôn x·ªôn kh√¥ng theo h√†ng l·ªëi">
              Di chuy·ªÉn l·ªôn x·ªôn kh√¥ng theo h√†ng l·ªëi
            </MenuItem>
          </TextField>

          {/* --- H·ªçc sinh vi ph·∫°m --- */}
          <Box>
            <TextField
              fullWidth
              label="H·ªçc sinh vi ph·∫°m (n·∫øu c√≥)"
              value={studentName}
              onChange={(e) => setStudentName(e.target.value)}
              placeholder="Nh·∫≠p t√™n ƒë·ªÉ g·ª£i √Ω..."
            />
            {suggestions.length > 0 && (
              <Paper
                sx={{
                  position: "absolute",
                  zIndex: 10,
                  mt: 0.5,
                  width: "100%",
                  maxHeight: 160,
                  overflowY: "auto",
                }}
              >
                {suggestions.map((s) => (
                  <MenuItem
                    key={s._id}
                    onClick={() => {
                      if (!selectedStudents.includes(s.name)) {
                        setSelectedStudents((prev) => [...prev, s.name]);
                      }
                      setStudentName("");
                      setSuggestions([]);
                    }}
                  >
                    {s.name}
                  </MenuItem>
                ))}
              </Paper>
            )}
            <Stack direction="row" spacing={1} mt={1}>
              {selectedStudents.map((s) => (
                <Paper
                  key={s}
                  sx={{
                    px: 1.5,
                    py: 0.5,
                    bgcolor: "#f5f5f5",
                    borderRadius: "8px",
                    fontSize: "0.9rem",
                  }}
                >
                  {s}
                </Paper>
              ))}
            </Stack>
          </Box>

          {/* --- Ng∆∞·ªùi ghi nh·∫≠n --- */}
          <TextField
            select
            label="Ng∆∞·ªùi ghi nh·∫≠n"
            value={recorder}
            onChange={(e) => setRecorder(e.target.value)}
          >
            <MenuItem value="th Huy">Th.Huy</MenuItem>
            <MenuItem value="th Nghƒ©a">Th.Nghƒ©a</MenuItem>
            <MenuItem value="th NƒÉm">Th.NƒÉm</MenuItem>
          </TextField>

          {/* --- Th·ªùi gian --- */}
          <TextField
            type="date"
            label="Ng√†y ghi nh·∫≠n"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            InputLabelProps={{ shrink: true }}
          />

          <Button variant="contained" onClick={handleSave}>
            L∆∞u ghi nh·∫≠n
          </Button>
        </Stack>
      </Paper>

      {/* --- Danh s√°ch vi ph·∫°m --- */}
      {records.length > 0 && (
        <Paper sx={{ p: 2 }}>
          <Typography variant="h6" mb={1}>
            Danh s√°ch l·ªõp ƒë√£ ghi nh·∫≠n vi ph·∫°m
          </Typography>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>L·ªõp</TableCell>
                <TableCell>L·ªói vi ph·∫°m</TableCell>
                <TableCell>H·ªçc sinh vi ph·∫°m</TableCell>
                <TableCell>Th·ªùi gian ghi nh·∫≠n</TableCell>
                <TableCell>Ng∆∞·ªùi ghi nh·∫≠n</TableCell>
                <TableCell>ƒêi·ªÉm tr·ª´</TableCell>
                <TableCell>Ghi ch√∫</TableCell>
                <TableCell>Thao t√°c</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {records.map((r) => (
                <TableRow key={r._id}>
                  <TableCell>{r.className}</TableCell>
                  <TableCell>{r.violation}</TableCell>
                  <TableCell>{r.studentName || "-"}</TableCell>
                  <TableCell>
                    {new Date(r.date).toLocaleDateString("vi-VN")}
                  </TableCell>
                  <TableCell>{r.recorder}</TableCell>
                  <TableCell>-{r.scoreChange || 10}</TableCell>
                  <TableCell>{r.note || "-"}</TableCell>
                  <TableCell>
                    <IconButton color="error" onClick={() => handleDelete(r._id)}>
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </Paper>
      )}
    </Box>
  );
}
