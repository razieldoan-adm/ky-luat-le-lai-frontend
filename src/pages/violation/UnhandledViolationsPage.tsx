// src/pages/violation/UnhandledViolationsPage.tsx
import { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  TextField,
  MenuItem,
  Checkbox,
  FormControlLabel,
  Button,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  Stack,
  ListItemText,
} from '@mui/material';
import api from '../../api/api';
import dayjs from 'dayjs';

interface Violation {
  _id: string;
  name: string;
  className: string;
  description: string;
  time: Date | string;
  handlingMethod: string;
}
interface Rule {
  _id: string;
  title: string;
  point: number;
  content: string;
}
interface Week {
  _id?: string;
  weekNumber?: number;
  start?: string;   // ho·∫∑c startDate t√πy API
  end?: string;     // ho·∫∑c endDate t√πy API
  label?: string;
}

export default function UnhandledViolationsPage() {
  const [violations, setViolations] = useState<Violation[]>([]);
  const [filtered, setFiltered] = useState<Violation[]>([]);
  const [selectedClasses, setSelectedClasses] = useState<string[]>([]);
  const [searchName, setSearchName] = useState('');
  const [classList, setClassList] = useState<string[]>([]);
  const [rules, setRules] = useState<Rule[]>([]);
  const [selectedWeek, setSelectedWeek] = useState<string | number | ''>('all');
  const [onlyFrequent, setOnlyFrequent] = useState(false);

  // üîπ danh s√°ch tu·∫ßn t·ª´ API
  const [weekList, setWeekList] = useState<Week[]>([]);

  useEffect(() => {
    fetchViolations();
    fetchClasses();
    fetchRules();
    fetchWeeks(); // g·ªçi API l·∫•y tu·∫ßn
  }, []);

  const fetchViolations = async () => {
    try {
      const res = await api.get('/api/violations/all/all-student');
      setViolations(res.data);
      setFiltered(res.data);
    } catch (err) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu vi ph·∫°m:', err);
    }
  };

  const fetchClasses = async () => {
    try {
      const res = await api.get('/api/classes');
      const validClasses = res.data
        .filter((cls: any) => cls.teacher)
        .map((cls: any) => cls.className);
      setClassList(validClasses);
    } catch (err) {
      console.error('L·ªói khi l·∫•y danh s√°ch l·ªõp:', err);
    }
  };

  const fetchRules = async () => {
    try {
      const res = await api.get('/api/rules');
      setRules(res.data);
    } catch (err) {
      console.error('L·ªói khi l·∫•y rules:', err);
    }
  };

  // --- YOUR provided fetchWeeks (kept as-is) ---
  const fetchWeeks = async () => {
    try {
      const res = await api.get('/api/academic-weeks/study-weeks');
      setWeekList(res.data);
    } catch (err) {
      console.error('L·ªói khi l·∫•y danh s√°ch tu·∫ßn:', err);
    }
  };

  const applyFilters = () => {
    let data = [...violations];

    // L·ªçc theo l·ªõp (n·∫øu c√≥ ch·ªçn) ‚Äî n·∫øu selectedClasses r·ªóng => nghƒ©a l√† "t·∫•t c·∫£"
    if (selectedClasses.length > 0) {
      data = data.filter((v) => selectedClasses.includes(v.className));
    }

    // L·ªçc theo tu·∫ßn (d√πng start/end trong weekList)
    if (selectedWeek !== 'all' && selectedWeek !== '') {
      // selectedWeek c√≥ th·ªÉ l√† number ho·∫∑c string (t√πy API), so s√°nh b·∫±ng string ƒë·ªÉ an to√†n
      const week = weekList.find(
        (w) =>
          (w.weekNumber !== undefined && String(w.weekNumber) === String(selectedWeek)) ||
          w.label === selectedWeek
      );
      if (week) {
        const start = (week.start ?? (week as any).startDate) || '';
        const end = (week.end ?? (week as any).endDate) || '';
        if (start && end) {
          data = data.filter(
            (v) =>
              dayjs(v.time).isAfter(dayjs(start).subtract(1, 'day')) &&
              dayjs(v.time).isBefore(dayjs(end).add(1, 'day'))
          );
        }
      }
    }

    // L·ªçc theo t√™n (kh√¥ng ph√¢n bi·ªát d·∫•u/hoa)
    if (searchName) {
      const keyword = searchName.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
      data = data.filter((v) => {
        const studentName = (v.name || '').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        return studentName.includes(keyword);
      });
    }

    // Ch·ªâ h·ªçc sinh >= 3 vi ph·∫°m
    if (onlyFrequent) {
      const countMap: { [key: string]: number } = {};
      data.forEach((v) => {
        const normalized = v.name.trim().toLowerCase();
        countMap[normalized] = (countMap[normalized] || 0) + 1;
      });
      data = data.filter((v) => countMap[v.name.trim().toLowerCase()] >= 3);
    }

    // S·∫Øp x·∫øp theo l·ªõp r·ªìi theo t√™n (gi·ªØ gi·ªëng code c≈©)
    data.sort((a, b) => {
      if (a.className === b.className) {
        return a.name.localeCompare(b.name, 'vi', { sensitivity: 'base' });
      }
      // numeric compare ƒë·ªÉ l·ªõp 6A10 sau 6A2 (n·∫øu d·∫°ng s·ªë)
      return a.className.localeCompare(b.className, 'vi', { numeric: true });
    });

    setFiltered(data);
  };

  const clearFilters = () => {
    setSelectedClasses([]);
    setSearchName('');
    setSelectedWeek('all');
    setOnlyFrequent(false);
    setFiltered(violations);
  };

  return (
    <Box sx={{ maxWidth: '100%', mx: 'auto', py: 4 }}>
      <Typography variant="h4" fontWeight="bold" align="center" gutterBottom>
        H·ªçc sinh vi ph·∫°m (b√°o c√°o)
      </Typography>

      <Paper sx={{ width: '100%', overflowX: 'auto', borderRadius: 3, mt: 2, p: 2, mb: 4 }} elevation={3}>
        <Stack direction={{ xs: 'column', md: 'row' }} spacing={2} alignItems="center" flexWrap="wrap">
          {/* === CH·ªñ CH·ªåN L·ªöP ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ ===
              - Select multiple v·ªõi checkbox
              - M·∫∑c ƒë·ªãnh kh√¥ng ch·ªçn (interpreted as "t·∫•t c·∫£ l·ªõp")
          */}
          <TextField
            label="Ch·ªçn l·ªõp"
            select
            SelectProps={{
              multiple: true,
              renderValue: (selected: any) => {
                if (!selected || (Array.isArray(selected) && selected.length === 0)) return 'T·∫•t c·∫£ l·ªõp';
                return Array.isArray(selected) ? selected.join(', ') : String(selected);
              },
            }}
            value={selectedClasses}
            onChange={(e) =>
              setSelectedClasses(typeof e.target.value === 'string' ? e.target.value.split(',') : (e.target.value as string[]))
            }
            sx={{ minWidth: 200 }}
          >
            {classList.map((cls) => (
              <MenuItem key={cls} value={cls}>
                <Checkbox checked={selectedClasses.indexOf(cls) > -1} />
                <ListItemText primary={cls} />
              </MenuItem>
            ))}
          </TextField>

          {/* Dropdown tu·∫ßn (t·ª´ API) */}
          <TextField
            label="Ch·ªçn tu·∫ßn"
            select
            value={selectedWeek}
            onChange={(e) =>
              // gi·ªØ kh·∫£ nƒÉng gi√° tr·ªã l√† "all" | "" | number
              setSelectedWeek((() => {
                const v = e.target.value as string;
                if (v === 'all') return 'all';
                if (v === '') return '';
                // n·∫øu weekList cung c·∫•p weekNumber, v s·∫Ω l√† s·ªë d·∫°ng string -> chuy·ªÉn v·ªÅ number
                return isNaN(Number(v)) ? v : Number(v);
              })())
            }
            sx={{ minWidth: 200 }}
          >
            <MenuItem value="all">T·∫•t c·∫£ tu·∫ßn</MenuItem>
            {weekList.map((w) => {
              // hi·ªÉn th·ªã: Tu·∫ßn X (dd/mm - dd/mm) n·∫øu c√≥ start/end, fallback show label ho·∫∑c weekNumber
              const start = (w.start ?? (w as any).startDate) || '';
              const end = (w.end ?? (w as any).endDate) || '';
              const weekLabel = w.weekNumber !== undefined ? `Tu·∫ßn ${w.weekNumber}` : w.label ?? 'Tu·∫ßn';
              const rangeText = start && end ? ` (${dayjs(start).format('DD/MM')} - ${dayjs(end).format('DD/MM')})` : '';
              const value = w.weekNumber !== undefined ? w.weekNumber : (w.label ?? '');
              return (
                <MenuItem key={String(value) + (w._id ?? '')} value={value}>
                  {weekLabel + rangeText}
                </MenuItem>
              );
            })}
          </TextField>

          {/* T√¨m theo t√™n */}
          <TextField
            label="T√¨m theo t√™n h·ªçc sinh"
            value={searchName}
            onChange={(e) => setSearchName(e.target.value)}
            sx={{ minWidth: 200 }}
          />

          {/* Ch·ªâ HS >= 3 vi ph·∫°m */}
          <FormControlLabel
            control={<Checkbox checked={onlyFrequent} onChange={(e) => setOnlyFrequent(e.target.checked)} />}
            label="Ch·ªâ h·ªçc sinh >= 3 vi ph·∫°m"
          />

          <Button variant="contained" onClick={applyFilters}>
            √Åp d·ª•ng
          </Button>
          <Button variant="outlined" onClick={clearFilters}>
            X√≥a l·ªçc
          </Button>
        </Stack>
      </Paper>

      <Paper elevation={3} sx={{ width: '100%', overflowX: 'auto', borderRadius: 3, mt: 2 }}>
        <Table size="small">
          <TableHead>
            <TableRow sx={{ backgroundColor: '#87cafe' }}>
              <TableCell>STT</TableCell>
              <TableCell>H·ªç t√™n</TableCell>
              <TableCell>L·ªõp</TableCell>
              <TableCell>L·ªói vi ph·∫°m</TableCell>
              <TableCell>Th·ªùi gian</TableCell>
              <TableCell>H√¨nh th·ª©c x·ª≠ l√Ω</TableCell>
              <TableCell>ƒêi·ªÉm</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {filtered.length > 0 ? (
              filtered.map((v, i) => (
                <TableRow key={v._id}>
                  <TableCell>{i + 1}</TableCell>
                  <TableCell>{v.name}</TableCell>
                  <TableCell>{v.className}</TableCell>
                  <TableCell>{v.description}</TableCell>
                  <TableCell>{v.time ? dayjs(v.time).format('DD/MM/YYYY') : 'Kh√¥ng r√µ'}</TableCell>
                  <TableCell>{v.handlingMethod}</TableCell>
                  <TableCell>{rules.find((r) => r.title === v.description)?.point || 0}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} align="center">
                  Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </Paper>
    </Box>
  );
}
