// src/pages/violation/RecordAttendancePage.tsx
import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Paper,
  Stack,
  Button,
  TextField,
  MenuItem,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  Snackbar,
  Alert,
  IconButton,
  Autocomplete,
  ToggleButtonGroup,
  ToggleButton,
} from "@mui/material";
import { Check, Delete } from "@mui/icons-material";
import dayjs from "dayjs";
import api from "../../api/api";
import { useSearchParams } from "react-router-dom";
export default function RecordAttendancePage() {
  const [classes, setClasses] = useState<string[]>([]);
  const [className, setClassName] = useState("");
  const [grade, setGrade] = useState("");
  const [studentInput, setStudentInput] = useState("");
  const [suggestions, setSuggestions] = useState<any[]>([]);
  const [selectedStudent, setSelectedStudent] = useState<any>(null);

  // üîπ D·ªØ li·ªáu nh·∫≠p ghi nh·∫≠n
  const [date, setDate] = useState(dayjs().format("YYYY-MM-DD"));
  const [session, setSession] = useState("s√°ng");

  // üîπ D·ªØ li·ªáu xem danh s√°ch
  const [records, setRecords] = useState<any[]>([]);
  const [viewMode, setViewMode] = useState<"day" | "week">("day");
  const [viewDate, setViewDate] = useState(dayjs().format("YYYY-MM-DD"));
  const [viewWeek, setViewWeek] = useState<number | null>(null);
  const [searchParams] = useSearchParams();
  const className = searchParams.get("className");
  const grade = searchParams.get("grade");
  

  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: any }>({
    open: false,
    message: "",
    severity: "success",
  });

  // --- Load danh s√°ch l·ªõp (ch·ªâ ph·ª•c v·ª• ghi nh·∫≠n)
  useEffect(() => {
    const loadClasses = async () => {
      try {
        const res = await api.get("/api/classes");
        const arr = (res.data || []).map((c: any) => c.className ?? c.name ?? String(c));
        setClasses(arr);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch l·ªõp:", err);
      }
    };
    loadClasses();
  }, []);

  // --- G·ª£i √Ω h·ªçc sinh theo l·ªõp
  useEffect(() => {
    if (!studentInput.trim() || !className) {
      setSuggestions([]);
      return;
    }
    const t = setTimeout(async () => {
      try {
        const res = await api.get("/api/students/search", {
          params: { name: studentInput.trim(), className },
        });
        setSuggestions(res.data || []);
      } catch (err) {
        console.error("‚ùå L·ªói t√¨m h·ªçc sinh:", err);
        setSuggestions([]);
      }
    }, 300);
    return () => clearTimeout(t);
  }, [studentInput, className]);

  // --- L·∫•y danh s√°ch ngh·ªâ h·ªçc (to√†n b·ªô, kh√¥ng theo l·ªõp)
  const fetchRecords = async () => {
  try {
    const endpoint =
      viewMode === "week"
        ? `/api/class-attendance-summaries/by-week`
        : `/api/class-attendance-summaries/by-date`;

    // ‚úÖ Tham s·ªë g·ª≠i ƒëi
    const params: any = {};

    // üü¢ B·ªï sung className (b·∫Øt bu·ªôc theo backend)
    // üëâ N·∫øu b·∫°n c√≥ bi·∫øn className trong component
    params.className = className; // v√≠ d·ª•: "10A1"

    // üìÖ Ng√†y c·∫ßn xem
    params.date = dayjs(viewDate).format("YYYY-MM-DD");

    // üóìÔ∏è N·∫øu xem theo tu·∫ßn ‚Üí c√≥ th·ªÉ th√™m weekNumber
    if (viewMode === "week" && viewWeek) {
      params.weekNumber = viewWeek;
    }

    const res = await api.get(endpoint, { params });
    const data = res.data.records || res.data || [];
    setRecords(Array.isArray(data) ? data : []);
  } catch (err) {
    console.error("‚ùå L·ªói t·∫£i danh s√°ch:", err);
    setRecords([]);
  }
};


  // --- G·ªçi l·∫°i khi b·ªô l·ªçc thay ƒë·ªïi
  useEffect(() => {
  if (viewMode === "day" && viewDate) fetchRecords();
  if (viewMode === "week" && viewDate) fetchRecords(); // ‚úÖ ƒë·ªïi viewWeek ‚Üí viewDate
}, [viewMode, viewDate]);


  // --- Ghi nh·∫≠n ngh·ªâ h·ªçc
  const handleRecord = async () => {
    if (!selectedStudent || !className) {
      setSnackbar({
        open: true,
        message: "Vui l√≤ng ch·ªçn l·ªõp v√† h·ªçc sinh!",
        severity: "error",
      });
      return;
    }

    try {
      const payload = {
        studentId: selectedStudent._id,
        studentName: selectedStudent.name,
        className,
        grade,
        date,
        session,
      };

      await api.post(`/api/class-attendance-summaries/`, payload);
      setSnackbar({
        open: true,
        message: "‚úÖ ƒê√£ ghi nh·∫≠n ngh·ªâ h·ªçc.",
        severity: "success",
      });

      setSelectedStudent(null);
      setStudentInput("");
      fetchRecords();
    } catch (err: any) {
      setSnackbar({
        open: true,
        message: err.response?.data?.message || "L·ªói khi ghi nh·∫≠n ngh·ªâ h·ªçc.",
        severity: "error",
      });
    }
  };

  // --- Duy·ªát ph√©p
  const handleExcuse = async (id: string) => {
    try {
      await api.put(`/api/class-attendance-summaries/approve/${id}`);
      setSnackbar({
        open: true,
        message: "‚úÖ ƒê√£ duy·ªát ph√©p cho h·ªçc sinh.",
        severity: "success",
      });
      fetchRecords();
    } catch (err) {
      console.error("‚ùå L·ªói duy·ªát ph√©p:", err);
      setSnackbar({
        open: true,
        message: "L·ªói khi duy·ªát ph√©p.",
        severity: "error",
      });
    }
  };

  // --- X√≥a ghi nh·∫≠n
  const handleDelete = async (id: string) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ghi nh·∫≠n n√†y kh√¥ng?")) return;
    try {
      await api.delete(`/api/class-attendance-summaries/${id}`);
      setSnackbar({
        open: true,
        message: "‚úÖ ƒê√£ x√≥a ghi nh·∫≠n.",
        severity: "success",
      });
      fetchRecords();
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a:", err);
      setSnackbar({
        open: true,
        message: "L·ªói khi x√≥a ghi nh·∫≠n.",
        severity: "error",
      });
    }
  };

  return (
    <Box p={3}>
      <Typography variant="h5" fontWeight="bold" gutterBottom>
        Ghi nh·∫≠n chuy√™n c·∫ßn
      </Typography>

      {/* --- Nh·∫≠p d·ªØ li·ªáu ghi nh·∫≠n --- */}
      <Paper sx={{ p: 2, mb: 3 }}>
        <Stack direction="row" spacing={2} flexWrap="wrap">
          {/* Ch·ªçn l·ªõp */}
          <TextField
            select
            label="L·ªõp"
            size="small"
            value={className}
            onChange={(e) => {
              const value = e.target.value;
              setClassName(value);
              const g = value.match(/^\d+/)?.[0] || "";
              setGrade(g);
            }}
            sx={{ width: 160 }}
          >
            {classes.map((c) => (
              <MenuItem key={c} value={c}>
                {c}
              </MenuItem>
            ))}
          </TextField>

          {/* H·ªçc sinh */}
          <Autocomplete
            freeSolo
            options={suggestions}
            getOptionLabel={(s) => s.name || ""}
            inputValue={studentInput}
            onInputChange={(_, v) => setStudentInput(v)}
            onChange={(_, v) => setSelectedStudent(v)}
            sx={{ width: 250 }}
            renderInput={(params) => (
              <TextField {...params} label="H·ªçc sinh ngh·ªâ h·ªçc" size="small" />
            )}
          />

          {/* Ng√†y */}
          <TextField
            label="Ng√†y"
            type="date"
            size="small"
            value={date}
            onChange={(e) => setDate(e.target.value)}
          />

          {/* Bu·ªïi */}
          <TextField
            select
            label="Bu·ªïi"
            size="small"
            value={session}
            onChange={(e) => setSession(e.target.value)}
            sx={{ width: 120 }}
          >
            <MenuItem value="s√°ng">S√°ng</MenuItem>
            <MenuItem value="chi·ªÅu">Chi·ªÅu</MenuItem>
          </TextField>

          <Button variant="contained" color="primary" onClick={handleRecord}>
            Ghi nh·∫≠n
          </Button>
        </Stack>
      </Paper>

      {/* --- Ch·∫ø ƒë·ªô xem --- */}
      <Stack direction="column" spacing={2} mb={2}>
        <Stack direction="row" alignItems="center" spacing={2}>
          <Typography fontWeight="bold">Xem danh s√°ch:</Typography>
          <ToggleButtonGroup
            size="small"
            color="primary"
            value={viewMode}
            exclusive
            onChange={(_e, v) => v && setViewMode(v)}
          >
            <ToggleButton value="day">Theo ng√†y</ToggleButton>
            <ToggleButton value="week">Theo tu·∫ßn</ToggleButton>
          </ToggleButtonGroup>
        </Stack>

        {/* N·∫øu ch·ªçn xem theo ng√†y */}
        {viewMode === "day" && (
          <TextField
            label="Ch·ªçn ng√†y xem"
            type="date"
            size="small"
            value={viewDate}
            onChange={(e) => setViewDate(e.target.value)}
            sx={{ width: 200 }}
          />
        )}

        {/* N·∫øu ch·ªçn xem theo tu·∫ßn */}
        {viewMode === "week" && (
          <TextField
            label="Ch·ªçn tu·∫ßn"
            select
            size="small"
            value={viewWeek || ""}
            onChange={(e) => setViewWeek(Number(e.target.value))}
            sx={{ width: 200 }}
          >
            {[...Array(20)].map((_, i) => (
              <MenuItem key={i + 1} value={i + 1}>
                Tu·∫ßn {i + 1}
              </MenuItem>
            ))}
          </TextField>
        )}
      </Stack>

      {/* --- Danh s√°ch ngh·ªâ h·ªçc --- */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>STT</TableCell>
              <TableCell>L·ªõp</TableCell>
              <TableCell>H·ªç t√™n</TableCell>
              <TableCell>Bu·ªïi</TableCell>
              <TableCell>Ng√†y</TableCell>
              <TableCell>Ph√©p</TableCell>
              <TableCell>H√†nh ƒë·ªông</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {records.length > 0 ? (
              records.map((r, i) => (
                <TableRow key={r._id || i}>
                  <TableCell>{i + 1}</TableCell>
                  <TableCell>{r.className}</TableCell>
                  <TableCell>{r.studentName}</TableCell>
                  <TableCell>{r.session}</TableCell>
                  <TableCell>{r.date}</TableCell>
                  <TableCell>
                    {r.permission ? (
                      <Typography color="green">C√≥ ph√©p</Typography>
                    ) : (
                      <Typography color="error">Kh√¥ng ph√©p</Typography>
                    )}
                  </TableCell>
                  <TableCell>
                    <Stack direction="row" spacing={1}>
                      {!r.permission && (
                        <IconButton color="success" onClick={() => handleExcuse(r._id)}>
                          <Check />
                        </IconButton>
                      )}
                      <IconButton color="error" onClick={() => handleDelete(r._id)}>
                        <Delete />
                      </IconButton>
                    </Stack>
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={7} align="center">
                  <Typography color="gray">
                    Kh√¥ng c√≥ h·ªçc sinh ngh·ªâ h·ªçc trong th·ªùi gian n√†y.
                  </Typography>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* --- Th√¥ng b√°o --- */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
      </Snackbar>
    </Box>
  );
}
