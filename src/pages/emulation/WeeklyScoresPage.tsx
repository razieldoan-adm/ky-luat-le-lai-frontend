import { useEffect, useState } from "react";
import {
  Box,
  Typography,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
} from "@mui/material";
import api from "../../api/api";
import dayjs from "dayjs";

interface Week {
  _id: string;
  weekNumber: number;
  startDate: string;
  endDate: string;
}

interface ClassResult {
  className: string;
  studyScore: number; // ƒëi·ªÉm h·ªçc t·∫≠p
  bonusScore: number; // ƒëi·ªÉm th∆∞·ªüng
  discipline: number; // k·ª∑ lu·∫≠t
  hygiene: number; // v·ªá sinh
  diligence: number; // chuy√™n c·∫ßn
  totalBehavior: number; // t·ªïng n·ªÅ n·∫øp
  total: number; // t·ªïng ƒëi·ªÉm
  rankBehavior?: number;
  rankTotal?: number;
}

export default function FinalCompetitionResultPage() {
  const [weekList, setWeekList] = useState<Week[]>([]);
  const [selectedWeek, setSelectedWeek] = useState<Week | null>(null);
  const [results, setResults] = useState<ClassResult[]>([]);

  useEffect(() => {
    fetchWeeks();
  }, []);

  const fetchWeeks = async () => {
    try {
      const res = await api.get("/api/academic-weeks/study-weeks");
      setWeekList(res.data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y tu·∫ßn:", err);
    }
  };

  const fetchResults = async (weekId: string) => {
    try {
      // TODO: g·ªçi API backend tr·∫£ v·ªÅ k·∫øt qu·∫£ t√≠nh s·∫µn theo tu·∫ßn
      const res = await api.get(`/api/final-competition/week/${weekId}`);
      const data: ClassResult[] = res.data;

      // T√≠nh x·∫øp h·∫°ng n·ªÅ n·∫øp
      const behaviorSorted = [...data].sort((a, b) => b.totalBehavior - a.totalBehavior);
      behaviorSorted.forEach((item, index) => {
        item.rankBehavior = index + 1;
      });

      // T√≠nh x·∫øp h·∫°ng to√†n tr∆∞·ªùng
      const totalSorted = [...data].sort((a, b) => b.total - a.total);
      totalSorted.forEach((item, index) => {
        item.rankTotal = index + 1;
      });

      setResults(data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y k·∫øt qu·∫£:", err);
    }
  };

  const handleWeekChange = (weekId: string) => {
    const week = weekList.find(w => w._id === weekId) || null;
    setSelectedWeek(week);
    if (week) fetchResults(week._id);
  };

  return (
    <Box p={3}>
      <Typography variant="h5" gutterBottom>
        üèÜ K·∫øt qu·∫£ thi ƒëua to√†n tr∆∞·ªùng theo tu·∫ßn
      </Typography>

      <FormControl sx={{ minWidth: 200, mb: 2 }}>
        <InputLabel id="week-select-label">Tu·∫ßn</InputLabel>
        <Select
          labelId="week-select-label"
          value={selectedWeek?._id || ""}
          onChange={e => handleWeekChange(e.target.value)}
        >
          {weekList.map(week => (
            <MenuItem key={week._id} value={week._id}>
              Tu·∫ßn {week.weekNumber} ({dayjs(week.startDate).format("DD/MM")} - {dayjs(week.endDate).format("DD/MM")})
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <Typography variant="body1" gutterBottom>
        T·ªïng s·ªë l·ªõp: {results.length}
      </Typography>

      <Paper>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>STT</TableCell>
              <TableCell>L·ªõp</TableCell>
              <TableCell>H·ªçc t·∫≠p</TableCell>
              <TableCell>ƒêi·ªÉm th∆∞·ªüng</TableCell>
              <TableCell>K·ª∑ lu·∫≠t</TableCell>
              <TableCell>V·ªá sinh</TableCell>
              <TableCell>Chuy√™n c·∫ßn</TableCell>
              <TableCell>X·∫øp h·∫°ng n·ªÅ n·∫øp</TableCell>
              <TableCell>T·ªïng ƒëi·ªÉm n·ªÅ n·∫øp</TableCell>
              <TableCell>T·ªïng ƒëi·ªÉm</TableCell>
              <TableCell>X·∫øp h·∫°ng</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {results.map((row, index) => (
              <TableRow key={row.className}>
                <TableCell>{index + 1}</TableCell>
                <TableCell>{row.className}</TableCell>
                <TableCell>{row.studyScore}</TableCell>
                <TableCell>{row.bonusScore}</TableCell>
                <TableCell>{row.discipline}</TableCell>
                <TableCell>{row.hygiene}</TableCell>
                <TableCell>{row.diligence}</TableCell>
                <TableCell>{row.rankBehavior}</TableCell>
                <TableCell>{row.totalBehavior}</TableCell>
                <TableCell>{row.total}</TableCell>
                <TableCell>{row.rankTotal}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Paper>
    </Box>
  );
}
