import React, { useEffect, useState } from "react";
import {
  Box, Typography, CircularProgress, TextField, MenuItem, Button,
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper
} from "@mui/material";
import api from "@/api"; // ho·∫∑c ƒë∆∞·ªùng d·∫´n t·ªõi axios instance c·ªßa b·∫°n

interface ClassWeeklyScore {
  _id?: string;
  className: string;
  grade: string;
  weekNumber: number;
  hygieneScore: number;
  lineupScore: number;
  violationScore: number;
  attendanceScore: number;
  academicScore: number;
  rewardScore: number;
  disciplineScore?: number;
  totalScore?: number;
  rank?: number;
}

const WeeklyScoresPage: React.FC = () => {
  const [weeks, setWeeks] = useState<number[]>([]);
  const [selectedWeek, setSelectedWeek] = useState<number | "">("");
  const [classes, setClasses] = useState<string[]>([]);
  const [selectedClass, setSelectedClass] = useState<string>("T·∫•t c·∫£");
  const [scores, setScores] = useState<ClassWeeklyScore[]>([]);
  const [loading, setLoading] = useState(false);
  const [settings, setSettings] = useState<{ maxDiscipline: number }>({ maxDiscipline: 100 });

  // --- Load danh s√°ch tu·∫ßn & tu·∫ßn hi·ªán t·∫°i
  useEffect(() => {
    const fetchWeeks = async () => {
      try {
        const res = await api.get("/api/weekly-scores/weeks");
        setWeeks(res.data || []);
        const current = Math.max(...(res.data || []));
        setSelectedWeek(current);
        loadScores(current);
      } catch (err) {
        console.error("L·ªói khi t·∫£i tu·∫ßn:", err);
      }
    };
    fetchWeeks();
  }, []);

  // --- Load danh s√°ch l·ªõp
  useEffect(() => {
    const fetchClasses = async () => {
      try {
        const res = await api.get("/api/classes");
        const arr = (res.data || []).map((c: any) => c.className ?? c.name ?? String(c));
        setClasses(arr);
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch l·ªõp:", err);
      }
    };
    fetchClasses();
  }, []);

  // --- Load c·∫•u h√¨nh h·ªá th·ªëng
  useEffect(() => {
    const loadSettings = async () => {
      try {
        const res = await api.get("/api/settings");
        setSettings({ maxDiscipline: res.data?.maxDiscipline ?? 100 });
      } catch {
        setSettings({ maxDiscipline: 100 });
      }
    };
    loadSettings();
  }, []);

  // --- Load ƒëi·ªÉm tu·∫ßn
  const loadScores = async (weekNumber: number) => {
    setLoading(true);
    try {
      const res = await api.get(`/api/weekly-scores/weekly`, { params: { weekNumber } });
      let data: ClassWeeklyScore[] = res.data || [];

      // T√≠nh ƒëi·ªÉm k·ª∑ lu·∫≠t v√† t·ªïng thi ƒëua
      data = data.map((item) => {
        const discipline = settings.maxDiscipline -
          ((item.attendanceScore ?? 0) * 5 +
            (item.violationScore ?? 0) +
            (item.hygieneScore ?? 0) +
            (item.lineupScore ?? 0));
        const total = discipline + (item.rewardScore ?? 0) + (item.academicScore ?? 0);
        return { ...item, disciplineScore: discipline, totalScore: total };
      });

      // X·∫øp h·∫°ng
      data.sort((a, b) => (b.totalScore ?? 0) - (a.totalScore ?? 0));
      data.forEach((d, i) => (d.rank = i + 1));

      setScores(data);
    } catch (err) {
      console.error("L·ªói khi t·∫£i ƒëi·ªÉm:", err);
      setScores([]);
    } finally {
      setLoading(false);
    }
  };

  // --- Khi ƒë·ªïi tu·∫ßn
  const handleWeekChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const w = Number(e.target.value);
    setSelectedWeek(w);
    loadScores(w);
  };

  // --- Khi ƒë·ªïi l·ªõp
  const handleClassChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedClass(e.target.value);
  };

  // --- Khi s·ª≠a ƒëi·ªÉm h·ªçc t·∫≠p ho·∫∑c th∆∞·ªüng
  const handleChangeScore = (className: string, field: keyof ClassWeeklyScore, value: number) => {
    setScores((prev) =>
      prev.map((s) =>
        s.className === className ? { ...s, [field]: value } : s
      )
    );
  };

  // --- L∆∞u to√†n b·ªô ƒëi·ªÉm
  const handleSave = async () => {
    try {
      for (const s of scores) {
        await api.post("/api/weekly-scores/update", s);
      }
      alert("‚úÖ ƒê√£ l∆∞u to√†n b·ªô ƒëi·ªÉm tu·∫ßn!");
      loadScores(Number(selectedWeek));
    } catch (err) {
      console.error("L·ªói khi l∆∞u:", err);
      alert("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu");
    }
  };

  // --- Xu·∫•t Excel
  const handleExport = () => {
    if (!selectedWeek) return;
    window.open(`/api/weekly-scores/export/${selectedWeek}`, "_blank");
  };

  // --- L·ªçc l·ªõp hi·ªÉn th·ªã
  const filteredScores =
    selectedClass === "T·∫•t c·∫£"
      ? scores
      : scores.filter((s) => s.className === selectedClass);

  return (
    <Box p={3}>
      <Typography variant="h5" fontWeight="bold" mb={2}>
        üè´ T·ªïng h·ª£p ƒëi·ªÉm thi ƒëua c√°c l·ªõp
      </Typography>

      <Box display="flex" gap={2} mb={3}>
        <TextField
          select
          label="Tu·∫ßn h·ªçc"
          value={selectedWeek}
          onChange={handleWeekChange}
          sx={{ width: 160 }}
        >
          {weeks.map((w) => (
            <MenuItem key={w} value={w}>
              Tu·∫ßn {w}
            </MenuItem>
          ))}
        </TextField>

        <TextField
          select
          label="L·ªçc theo l·ªõp"
          value={selectedClass}
          onChange={handleClassChange}
          sx={{ width: 180 }}
        >
          <MenuItem value="T·∫•t c·∫£">T·∫•t c·∫£</MenuItem>
          {classes.map((cls) => (
            <MenuItem key={cls} value={cls}>
              {cls}
            </MenuItem>
          ))}
        </TextField>

        <Button variant="contained" color="primary" onClick={handleSave}>
          üíæ L∆∞u ƒëi·ªÉm
        </Button>
        <Button variant="outlined" color="success" onClick={handleExport}>
          üì§ Xu·∫•t Excel
        </Button>
      </Box>

      {loading ? (
        <CircularProgress />
      ) : (
        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>L·ªõp</TableCell>
                <TableCell align="center">V·ªá sinh</TableCell>
                <TableCell align="center">X·∫øp h√†ng</TableCell>
                <TableCell align="center">Vi ph·∫°m</TableCell>
                <TableCell align="center">Chuy√™n c·∫ßn</TableCell>
                <TableCell align="center">H·ªçc t·∫≠p</TableCell>
                <TableCell align="center">Th∆∞·ªüng</TableCell>
                <TableCell align="center">T·ªïng k·ª∑ lu·∫≠t</TableCell>
                <TableCell align="center">T·ªïng thi ƒëua</TableCell>
                <TableCell align="center">X·∫øp h·∫°ng</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredScores.map((row) => (
                <TableRow key={row.className}>
                  <TableCell>{row.className}</TableCell>
                  <TableCell align="center">{row.hygieneScore}</TableCell>
                  <TableCell align="center">{row.lineupScore}</TableCell>
                  <TableCell align="center">{row.violationScore}</TableCell>
                  <TableCell align="center">{row.attendanceScore}</TableCell>

                  <TableCell align="center">
                    <TextField
                      type="number"
                      value={row.academicScore ?? 0}
                      size="small"
                      onChange={(e) =>
                        handleChangeScore(row.className, "academicScore", Number(e.target.value))
                      }
                      sx={{ width: 80 }}
                    />
                  </TableCell>
                  <TableCell align="center">
                    <TextField
                      type="number"
                      value={row.rewardScore ?? 0}
                      size="small"
                      onChange={(e) =>
                        handleChangeScore(row.className, "rewardScore", Number(e.target.value))
                      }
                      sx={{ width: 80 }}
                    />
                  </TableCell>

                  <TableCell align="center">{row.disciplineScore?.toFixed(1)}</TableCell>
                  <TableCell align="center">{row.totalScore?.toFixed(1)}</TableCell>
                  <TableCell align="center">{row.rank}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Box>
  );
};

export default WeeklyScoresPage;
