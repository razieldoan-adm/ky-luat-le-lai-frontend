import React, { useEffect, useState } from "react";
import {
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import api from "../../api/api";

interface Score {
  className: string;
  grade: string;
  weekNumber: number;
  attendanceScore: number;
  hygieneScore: number;
  lineUpScore: number;
  violationScore: number;
  academicScore: number;
  bonusScore: number;
  totalViolation: number;
  totalScore: number;
  ranking: number;
}

interface Week {
  weekNumber: number;
}

const WeeklyScoresPage: React.FC = () => {
  const [weeks, setWeeks] = useState<Week[]>([]);
  const [selectedWeek, setSelectedWeek] = useState<Week | null>(null);
  const [scores, setScores] = useState<Score[]>([]);
  const [saved, setSaved] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  // üîπ Load danh s√°ch tu·∫ßn t·ª´ backend
  const fetchWeeks = async () => {
    const res = await api.get("/api/weeks");
    setWeeks(res.data);
  };

  // üîπ L·∫•y d·ªØ li·ªáu DB
  const fetchSavedScores = async (weekNumber: number) => {
    const res = await api.get(`/api/class-weekly-scores?weekNumber=${weekNumber}`);
    if (res.data.length > 0) {
      setScores(res.data);
      setSaved(true);
      checkWeekChanges(weekNumber);
    } else {
      setScores([]);
      setSaved(false);
    }
  };

  // üîπ Check thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
  const checkWeekChanges = async (weekNumber: number) => {
    try {
      const res = await api.get(`/api/class-weekly-scores/check-changes/${weekNumber}`);
      setHasChanges(res.data.changed);
    } catch (err) {
      console.error("Check changes error:", err);
    }
  };

  // üîπ Load d·ªØ li·ªáu t·∫°m
  const handleLoad = async () => {
    if (!selectedWeek) return;
    const res = await api.get(`/api/class-weekly-scores/temp?weekNumber=${selectedWeek.weekNumber}`);
    setScores(res.data);
    setSaved(false);
  };

  // üîπ T√≠nh x·∫øp h·∫°ng (FE)
  const handleRank = () => {
    const ranked = [...scores].sort((a, b) => b.totalScore - a.totalScore);
    let currentRank = 0;
    let lastScore: number | null = null;
    let count = 0;

    const newScores = ranked.map((s) => {
      count++;
      if (s.totalScore !== lastScore) {
        currentRank = count;
        lastScore = s.totalScore;
      }
      return { ...s, ranking: currentRank };
    });

    setScores(newScores);
  };

  // üîπ L∆∞u DB
  const handleSave = async () => {
    if (!selectedWeek) return;
    await api.post("/api/class-weekly-scores/save", {
      weekNumber: selectedWeek.weekNumber,
      scores,
    });
    setSaved(true);
    checkWeekChanges(selectedWeek.weekNumber);
  };

  // üîπ C·∫≠p nh·∫≠t DB (merge + auto x·∫øp h·∫°ng l·∫°i)
  const handleUpdate = async () => {
    if (!selectedWeek) return;
    const res = await api.post(`/api/class-weekly-scores/update/${selectedWeek.weekNumber}`);
    setScores(res.data);
    setSaved(false);
    setHasChanges(false);

    // sau khi update ‚Üí t·ª± t√≠nh l·∫°i x·∫øp h·∫°ng
    handleRank();
  };

  useEffect(() => {
    fetchWeeks();
  }, []);

  useEffect(() => {
    if (selectedWeek) {
      fetchSavedScores(selectedWeek.weekNumber);
    }
  }, [selectedWeek]);

  return (
    <Box p={3}>
      <Typography variant="h5">Qu·∫£n l√Ω ƒëi·ªÉm tu·∫ßn</Typography>

      {/* Ch·ªçn tu·∫ßn */}
      <Box mt={2}>
        {weeks.map((w) => (
          <Button
            key={w.weekNumber}
            variant={selectedWeek?.weekNumber === w.weekNumber ? "contained" : "outlined"}
            onClick={() => setSelectedWeek(w)}
            sx={{ mr: 1 }}
          >
            Tu·∫ßn {w.weekNumber}
          </Button>
        ))}
      </Box>

      {/* N√∫t h√†nh ƒë·ªông */}
      <Box display="flex" gap={2} mt={2}>
        {!scores.length && (
          <Button variant="contained" onClick={handleLoad}>
            Load d·ªØ li·ªáu
          </Button>
        )}

        {scores.length > 0 && scores.some((s) => !s.ranking) && (
          <Button variant="contained" color="primary" onClick={handleRank}>
            T√≠nh x·∫øp h·∫°ng
          </Button>
        )}

        {scores.length > 0 && scores.every((s) => s.ranking) && !saved && (
          <Button variant="contained" color="success" onClick={handleSave}>
            L∆∞u
          </Button>
        )}

        {saved && !hasChanges && (
          <Button variant="contained" color="inherit" disabled>
            ƒê√£ l∆∞u
          </Button>
        )}

        {saved && hasChanges && (
          <Button variant="contained" color="warning" onClick={handleUpdate}>
            C·∫≠p nh·∫≠t
          </Button>
        )}
      </Box>

      {/* B·∫£ng ƒëi·ªÉm */}
      <Table sx={{ mt: 3 }}>
        <TableHead>
          <TableRow>
            <TableCell>L·ªõp</TableCell>
            <TableCell>ƒêi·ªÉm chuy√™n c·∫ßn</TableCell>
            <TableCell>ƒêi·ªÉm v·ªá sinh</TableCell>
            <TableCell>ƒêi·ªÉm x·∫øp h√†ng</TableCell>
            <TableCell>ƒêi·ªÉm vi ph·∫°m</TableCell>
            <TableCell>ƒêi·ªÉm h·ªçc t·∫≠p</TableCell>
            <TableCell>ƒêi·ªÉm th∆∞·ªüng</TableCell>
            <TableCell>T·ªïng ƒëi·ªÉm</TableCell>
            <TableCell>X·∫øp h·∫°ng</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {scores.map((s) => (
            <TableRow key={s.className}>
              <TableCell>{s.className}</TableCell>
              <TableCell>{s.attendanceScore}</TableCell>
              <TableCell>{s.hygieneScore}</TableCell>
              <TableCell>{s.lineUpScore}</TableCell>
              <TableCell>{s.violationScore}</TableCell>
              <TableCell>{s.academicScore}</TableCell>
              <TableCell>{s.bonusScore}</TableCell>
              <TableCell>{s.totalScore}</TableCell>
              <TableCell>{s.ranking || "-"}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </Box>
  );
};

export default WeeklyScoresPage;
