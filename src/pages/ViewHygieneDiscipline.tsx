import { useState, useEffect } from "react";
import api from "../api/api";
import {
  Box, Typography, MenuItem, Select, FormControl, InputLabel,
  Table, TableHead, TableRow, TableCell, TableBody, CircularProgress, Stack, Paper
} from '@mui/material';

export default function ViewClassLineUpDetails() {
  const [weeks, setWeeks] = useState<any[]>([]);
  const [selectedWeek, setSelectedWeek] = useState<any>(null);
  const [classes, setClasses] = useState<string[]>([]);
  const [selectedClass, setSelectedClass] = useState('');
  const [loading, setLoading] = useState(false);
  const [lineupDetails, setLineupDetails] = useState<any[]>([]); // danh s√°ch l·ªói chi ti·∫øt
  const [total, setTotal] = useState<number>(0);

  const lineupRuleList = [
    "T·∫≠p trung x·∫øp h√†ng qu√° th·ªùi gian quy ƒë·ªãnh",
    "M·∫•t tr·∫≠t t·ª±, ƒë√πa gi·ª°n khi x·∫øp h√†ng",
    "M·∫•t tr·∫≠t t·ª± khi di chuy·ªÉn, di chuy·ªán l·ªôn x·ªôn kh√¥ng theo h√†ng l·ªëi",
    'Nhi·ªÅu h·ªçc sinh ng·ªìi trong l·ªõp gi·ªù ch∆°i, kh√¥ng ra x·∫øp h√†ng',
    'M·∫•t tr·∫≠t t·ª± trong khi x·∫øp h√†ng gi·ªù SHDC',
  ];

  useEffect(() => {
    fetchWeeks();
    fetchClasses();
  }, []);

  const fetchWeeks = async () => {
    try {
      const res = await api.get("/api/academic-weeks/study-weeks");
      setWeeks(res.data);
      setSelectedWeek(res.data[0]);
    } catch (err) {
      console.error("L·ªói khi t·∫£i tu·∫ßn:", err);
    }
  };

  const fetchClasses = async () => {
    try {
      const res = await api.get("/api/classes");
      const validClasses = res.data.map((cls: any) => cls.className);
      setClasses(validClasses);
      if (validClasses.length > 0) setSelectedClass(validClasses[0]);
    } catch (err) {
      console.error("L·ªói khi t·∫£i l·ªõp:", err);
    }
  };

  const fetchLineUpDetails = async () => {
    if (!selectedWeek || !selectedClass) return;
    setLoading(true);

    try {
      const res = await api.get("/api/class-lineup-summaries/weekly", {
        params: { weekNumber: selectedWeek.weekNumber, className: selectedClass },
      });

      const data = res.data[0];
      if (!data) {
        setLineupDetails([]);
        setTotal(0);
        setLoading(false);
        return;
      }

      // data c√≥ th·ªÉ ch·ª©a d·∫°ng: { dailyData: [{ day: 'T2', violations: [1,3] }, ...] }
      if (Array.isArray(data.dailyData)) {
        const formatted = data.dailyData.map((d: any) => ({
          day: d.day,
          violations: d.violations.map((v: number) => lineupRuleList[v - 1] || "Kh√¥ng r√µ l·ªói"),
        }));
        setLineupDetails(formatted);
      } else {
        setLineupDetails([]);
      }

      setTotal(data.total || 0);
    } catch (err) {
      console.error("L·ªói t·∫£i chi ti·∫øt lineup:", err);
    }

    setLoading(false);
  };

  useEffect(() => {
    if (selectedWeek && selectedClass) fetchLineUpDetails();
  }, [selectedWeek, selectedClass]);

  return (
    <Box p={3}>
      <Typography variant="h5" gutterBottom>üìã Chi ti·∫øt l·ªói x·∫øp h√†ng theo l·ªõp</Typography>

      <Stack direction="row" spacing={2} mb={2}>
        <FormControl sx={{ minWidth: 150 }}>
          <InputLabel>Tu·∫ßn</InputLabel>
          <Select
            value={selectedWeek?._id || ""}
            label="Tu·∫ßn"
            onChange={(e) => setSelectedWeek(weeks.find(w => w._id === e.target.value))}
          >
            {weeks.map((w) => (
              <MenuItem key={w._id} value={w._id}>Tu·∫ßn {w.weekNumber}</MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl sx={{ minWidth: 150 }}>
          <InputLabel>L·ªõp</InputLabel>
          <Select
            value={selectedClass}
            label="L·ªõp"
            onChange={(e) => setSelectedClass(e.target.value)}
          >
            {classes.map((c) => (
              <MenuItem key={c} value={c}>{c}</MenuItem>
            ))}
          </Select>
        </FormControl>
      </Stack>

      {loading ? (
        <CircularProgress />
      ) : (
        <Paper elevation={3} sx={{ p: 2 }}>
          <Table>
            <TableHead>
              <TableRow sx={{ backgroundColor: "#b3e5fc" }}>
                <TableCell align="center" width={100}>Th·ª©</TableCell>
                <TableCell align="center">Danh s√°ch l·ªói</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {lineupDetails.length > 0 ? (
                lineupDetails.map((d, i) => (
                  <TableRow key={i}>
                    <TableCell align="center">{d.day}</TableCell>
                    <TableCell>
                      {d.violations.length > 0 ? (
                        d.violations.map((v: string, idx: number) => (
                          <Typography key={idx} sx={{ ml: 1 }}>‚Ä¢ {v}</Typography>
                        ))
                      ) : (
                        <Typography color="green">‚úÖ Kh√¥ng l·ªói</Typography>
                      )}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={2} align="center">Ch∆∞a c√≥ d·ªØ li·ªáu tu·∫ßn n√†y</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>

          <Typography variant="h6" sx={{ mt: 2 }}>
            T·ªïng s·ªë l·ªói tu·∫ßn: <b>{total}</b>
          </Typography>
        </Paper>
      )}
    </Box>
  );
}
